% BFO 2020 Axiomatization, generated 2021/11/12
% Author: Alan Ruttenberg - alanruttenberg@gmail.com
% The most recent version of this file will always be in the GitHub repository https://github.com/bfo-ontology/bfo-2020
% This work is licensed under a Creative Commons "Attribution 4.0 International" license: https://creativecommons.org/licenses/by/4.0/

% Section: Participation

set(prolog_style_variables)

% participates-in and has-participant are inverse relations
all t all a all b  ((participatesIn(a,b,t)) <-> (hasParticipant(b,a,t))) # label("participates-in-inverse-of-has-participant") .

% At every time a process exists it has a participant
all p all t  ((instanceOf(p,process,t)) -> (exists c  (participatesIn(c,p,t)))) # label("process-always-has-participant") .

% participates-in is dissective on third argument, a temporal region
all p all q all r all s  ((((participatesIn(p,q,r)) & (temporalPartOf(s,r)))) -> (participatesIn(p,q,s))) # label("participates-in-dissective-on-third-argument-temporal") .

% participates-in is time indexed and has domain: independent-continuant but not spatial-region or specifically-dependent-continuant or generically-dependent-continuant  and range: process
all a all b all t  ((participatesIn(a,b,t)) -> (((((((instanceOf(a,independentContinuant,t)) & (-(instanceOf(a,spatialRegion,t))))) | (instanceOf(a,specificallyDependentContinuant,t)) | (instanceOf(a,genericallyDependentContinuant,t)))) & (instanceOf(b,process,t)) & (instanceOf(t,temporalRegion,t))))) # label("participates-in-domain-range") .

% At every time a specific dependent s participates in a process p there's a part of that time, during which there's an independent-continuant that s s-depends on, and that participates in p at that time
all sdc all p all t  ((((instanceOf(sdc,specificallyDependentContinuant,t)) & (participatesIn(sdc,p,t)))) -> (exists tp exists ic  (((instanceOf(tp,temporalRegion,tp)) & (temporalPartOf(tp,t)) & (instanceOf(ic,independentContinuant,tp)) & (-(instanceOf(ic,spatialRegion,tp))) & (specificallyDependsOn(sdc,ic)) & (participatesIn(ic,p,tp)))))) # label("participation-of-specific-dependent-continuant") .

% If a generically dependent continuant participates in a process p then, if it is concretized as a process, that process is part of p, fand if concretized as an sdc then the bearer of that sdc participates in the process
all gdc all p all t  ((((instanceOf(gdc,genericallyDependentContinuant,t)) & (participatesIn(gdc,p,t)))) -> (exists tp exists b  (((temporalPartOf(tp,t)) & (concretizes(b,gdc,tp)) & (((((instanceOf(b,specificallyDependentContinuant,tp)) & (exists ic  (((specificallyDependsOn(b,ic)) & (participatesIn(ic,p,tp))))))) | (((occurrentPartOf(b,p)) & (existsAt(b,tp)))))))))) # label("participation-of-generically-dependent-continuant") .



