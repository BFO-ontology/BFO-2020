% BFO 2020 Axiomatization, generated 2021/11/12
% Author: Alan Ruttenberg - alanruttenberg@gmail.com
% The most recent version of this file will always be in the GitHub repository https://github.com/bfo-ontology/bfo-2020
% This work is licensed under a Creative Commons "Attribution 4.0 International" license: https://creativecommons.org/licenses/by/4.0/

% Section: Spatiotemporal

set(prolog_style_variables)

% If something occupies a temporal region, then it exists at that region
all a all t  ((occupiesTemporalRegion(a,t)) -> (existsAt(a,t))) # label("occupies-temporal-region-existence") .

% exists-at is a lower bound on first argument
all p all q all r  ((((existsAt(p,q)) & (temporalPartOf(p,r)))) -> (existsAt(r,q))) # label("exists-at-is-a-lower-bound-on-first-argument-temporal") .

% occupies-temporal-region is functional on second argument
all p all q all r  ((((occupiesTemporalRegion(p,q)) & (occupiesTemporalRegion(p,r)))) -> ((q) = (r))) # label("occupies-temporal-region-functional-on-second-argument") .

% temporally-projects-onto is functional on second argument
all p all q all r  ((((temporallyProjectsOnto(p,q)) & (temporallyProjectsOnto(p,r)))) -> ((q) = (r))) # label("temporally-projects-onto-functional-on-second-argument") .

% spatially-projects-onto is functional on second argument
all p all q all r all s  ((((spatiallyProjectsOnto(p,q,r)) & (spatiallyProjectsOnto(p,s,r)))) -> ((q) = (s))) # label("spatially-projects-onto-functional-on-second-argument") .

% occupies-spatiotemporal-region is functional on second argument
all p all q all r  ((((occupiesSpatiotemporalRegion(p,q)) & (occupiesSpatiotemporalRegion(p,r)))) -> ((q) = (r))) # label("occupies-spatiotemporal-region-functional-on-second-argument") .

% occurs-in is a lower bound on second argument
all p all c1 all c2  ((((occursIn(p,c1)) & (all t  ((existsAt(p,t)) <-> (locatedIn(c1,c2,t)))))) -> (occursIn(p,c2))) # label("occurs-in-is-a-lower-bound-on-second-argument-continuant") .

% If a occupies-spatial-region b then if a is an instance of site then b is an instance of three-dimensional-spatial-region
all p all q all t  ((((occupiesSpatialRegion(p,q,t)) & (instanceOf(p,site,t)))) -> (instanceOf(q,threeDimensionalSpatialRegion,t))) # label("occupies-spatial-region.site->three-dimensional-spatial-region") .

% The temporal region during which a process occurs is the same as that which the spatiotemporal region the process occupies temporally projects onto
all p all t  ((occupiesTemporalRegion(p,t)) <-> (exists st  (((occupiesSpatiotemporalRegion(p,st)) & (temporallyProjectsOnto(st,t)))))) # label("process-occupies-temporal-region-same-as-st-region-occupies") .

% A process boundary occupies a spatiotemporal instant
all pb all tr  ((((exists t  (instanceOf(pb,processBoundary,t))) & (occupiesTemporalRegion(pb,tr)))) -> (instanceOf(tr,temporalInstant,tr))) # label("process-boundary-occupies-temporal-instant") .

% for every process there's a corresponding spatiotemporal-region
all p  ((exists t  (((instanceOf(p,process,t)) | (instanceOf(p,processBoundary,t))))) -> (exists s  (occupiesSpatiotemporalRegion(p,s)))) # label("processes-occupy-spatiotemporal-regions") .

% temporally-projects-onto has domain spatiotemporal-region and range temporal-region
all a all b  ((temporallyProjectsOnto(a,b)) -> (((exists t  (instanceOf(a,spatiotemporalRegion,t))) & (exists t  (instanceOf(b,temporalRegion,t)))))) # label("temporally-projects-onto-domain-range") .

% Spatiotemporal regions always project on to some temporal region
all st  ((exists t  (instanceOf(st,spatiotemporalRegion,t))) -> (exists t  (((instanceOf(t,temporalRegion,t)) & (temporallyProjectsOnto(st,t)))))) # label("every-spatiotemporal-region-projects-onto-temporal-region") .

% spatially-projects-onto is time indexed and has domain: spatiotemporal-region and range: spatial-region
all a all b all t  ((spatiallyProjectsOnto(a,b,t)) -> (((instanceOf(a,spatiotemporalRegion,t)) & (instanceOf(b,spatialRegion,t)) & (instanceOf(t,temporalRegion,t))))) # label("spatially-projects-onto-domain-range") .

% Every temporal region is a projection from a spatiotemporal region
all tr  ((exists t  (instanceOf(tr,temporalRegion,t))) -> (exists st  (((exists t  (instanceOf(st,spatiotemporalRegion,t))) & (temporallyProjectsOnto(st,tr)))))) # label("every-temporal-region-is-projection-from-spatiotemporal-region") .

% Spatiotemporal regions always project on to some spatial region at any time
all st all t  ((instanceOf(st,spatiotemporalRegion,t)) -> (exists s exists tp  (((temporalPartOf(tp,t)) & (instanceOf(s,spatialRegion,tp)) & (spatiallyProjectsOnto(st,s,tp)))))) # label("every-spatiotemporal-region-projects-onto-spatial-region") .

% occupies-temporal-region has domain process or process-boundary  and range temporal-region
all a all b  ((occupiesTemporalRegion(a,b)) -> (((exists t  (((instanceOf(a,process,t)) | (instanceOf(a,processBoundary,t))))) & (exists t  (instanceOf(b,temporalRegion,t)))))) # label("occupies-temporal-region-domain-range") .

% Every spatial region is a projection from a spatiotemporal region
all sr  ((exists t  (instanceOf(sr,spatialRegion,t))) -> (exists st  (((exists t  (instanceOf(st,spatiotemporalRegion,t))) & (exists t  (spatiallyProjectsOnto(st,sr,t))))))) # label("every-spatial-region-is-projection-from-spatiotemporal-region") .

% occupies-spatiotemporal-region has domain process or process-boundary  and range spatiotemporal-region
all a all b  ((occupiesSpatiotemporalRegion(a,b)) -> (((exists t  (((instanceOf(a,process,t)) | (instanceOf(a,processBoundary,t))))) & (exists t  (instanceOf(b,spatiotemporalRegion,t)))))) # label("occupies-spatiotemporal-region-domain-range") .

% A process occupies at least a temporal interval
all proc all tr  ((((exists t  (instanceOf(proc,process,t))) & (occupiesTemporalRegion(proc,tr)))) -> (exists interval  (((instanceOf(interval,temporalInterval,interval)) & (temporalPartOf(interval,tr)))))) # label("process-occupies-at-least-an-interval") .

% If one occurrent is part of another, then the temporal region of the first is part of the temporal region of the second
all o1 all o2 all t1 all t2  ((((exists t  (((instanceOf(o1,process,t)) | (instanceOf(o1,processBoundary,t))))) & (exists t  (instanceOf(o2,process,t))) & (occurrentPartOf(o1,o2)) & (occupiesTemporalRegion(o1,t1)) & (occupiesTemporalRegion(o2,t2)))) -> (temporalPartOf(t1,t2))) # label("parts-of-processes-imply-temporal-regions-part") .

% If one process or process boundary is part of another, then their corresponding temporal regions are also in a parthood relation
all o1 all o2 all st1 all st2  ((((exists t  (((instanceOf(o1,process,t)) | (instanceOf(o1,processBoundary,t))))) & (exists t  (((instanceOf(o2,process,t)) | (instanceOf(o2,processBoundary,t))))) & (occurrentPartOf(o1,o2)) & (occupiesSpatiotemporalRegion(o1,st1)) & (occupiesSpatiotemporalRegion(o2,st2)))) -> (occurrentPartOf(st1,st2))) # label("parts-of-processes-imply-spatiotemporal-regions-part") .

% If a process or process boundary is part of another, their spatiotemporal regions are part too
all p1 all p2  ((((((exists t  (instanceOf(p1,process,t))) | (exists t  (instanceOf(p1,processBoundary,t))))) & (((exists t  (instanceOf(p2,process,t))) | (exists t  (instanceOf(p2,processBoundary,t))))))) -> ((occurrentPartOf(p1,p2)) <-> (exists st1 exists st2  (((occupiesSpatiotemporalRegion(p1,st1)) & (occupiesSpatiotemporalRegion(p2,st2)) & (occurrentPartOf(st1,st2))))))) # label("process-occurrent-part-of-implication") .

% process or process-boundary p occupies-temporal-region t iff every part of p temporally occupies a part of t, and there isn't a smaller part of t that p occupies.
all o all t  ((((((exists t1  (instanceOf(o,process,t1))) | (exists t1  (instanceOf(o,processBoundary,t1))))) & (instanceOf(t,temporalRegion,t)))) -> ((occupiesTemporalRegion(o,t)) <-> (((all op  ((occurrentPartOf(op,o)) -> (all tp  ((occupiesTemporalRegion(op,tp)) -> (occurrentPartOf(tp,t)))))) & (-(exists tprime  (((-((tprime) = (t))) & (occurrentPartOf(tprime,t)) & (occupiesTemporalRegion(o,tprime)))))))))) # label("occupies-temporal-region-exact") .

% process p (or boundary) occupies-spatiotemporal-region st iff every part of p  occupies-spatiotemporal-region a part of st, and there isn't a smaller part of st that p occupies.
all o all st  ((((((exists t1  (instanceOf(o,process,t1))) | (exists t1  (instanceOf(o,processBoundary,t1))))) & (exists t1  (instanceOf(st,spatiotemporalRegion,t1))))) -> ((occupiesSpatiotemporalRegion(o,st)) <-> (((all op  ((occurrentPartOf(op,o)) -> (all stp  ((occupiesSpatiotemporalRegion(op,stp)) -> (occurrentPartOf(stp,st)))))) & (-(exists stprime  (((-((stprime) = (st))) & (occurrentPartOf(stprime,st)) & (occupiesSpatiotemporalRegion(o,stprime)))))))))) # label("occupies-spatiotemporal-region-exact") .



