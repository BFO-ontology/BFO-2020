% BFO 2020 Axiomatization, generated 2019/12/05
% Author: Alan Ruttenberg - alanruttenberg@gmail.com
% This work is licensed under a Creative Commons "Attribution 4.0 International" license: https://creativecommons.org/licenses/by/4.0/

% Section: Spatial

set(prolog_style_variables)

% occurs-in is lower bound location
all p all c1 all c2  ((((occursIn(p,c1)) & (all t  ((existsAt(p,t)) <-> (((existsAt(c2,t)) & (continuantPartOf(c1,c2,t)))))))) -> (occursIn(p,c2))) # label("occurs-in-lower-bound-on-process") .

% occurs-in has domain process or process-boundary  and range material-entity or site 
all a all b  ((occursIn(a,b)) -> (((exists t  (((instanceOf(a,process,t)) | (instanceOf(a,processBoundary,t))))) & (exists t  (((instanceOf(b,materialEntity,t)) | (instanceOf(b,site,t)))))))) # label("occurs-in-domain-range") .

% occupies-spatial-region is functional on second argument
all p all q all r all s  ((((occupiesSpatialRegion(p,q,r)) & (occupiesSpatialRegion(p,s,r)))) -> ((q) = (s))) # label("occupies-spatial-region-functional-on-second-argument") .

% If a process (or process-boundary) occurs in a continuant, that continuant exists at least as long as the process does
all p all c  ((occursIn(p,c)) -> (all t  ((existsAt(p,t)) -> (existsAt(c,t))))) # label("occurs-in-site-exists-as-long-as-process-does") .

% spatial regions don't change what they are part of.
all s all sp  ((exists t  (((instanceOf(s,spatialRegion,t)) & (continuantPartOf(sp,s,t))))) -> (all t  ((exists sPrime  (continuantPartOf(sPrime,s,t))) -> (continuantPartOf(sp,s,t))))) # label("spatial-region-part-of-another-forever") .

% All spatial regions are part of a 3-dimensional spatial region
all s all t  ((instanceOf(s,spatialRegion,t)) -> (exists s3  (((instanceOf(s3,threeDimensionalSpatialRegion,t)) & (continuantPartOf(s,s3,t)))))) # label("spatial-regions-are-part-of-3d-space") .

% located-in is a lower bound on second argument
all p all q all r all s  ((((locatedIn(p,q,r)) & (continuantPartOf(q,s,r)))) -> (locatedIn(p,s,r))) # label("located-in-is-a-lower-bound-on-second-argument-continuant") .

% occupies-spatial-region is dissective on third argument, a temporal region
all p all q all r all s  ((((occupiesSpatialRegion(p,q,r)) & (temporalPartOf(s,r)))) -> (occupiesSpatialRegion(p,q,s))) # label("occupies-spatial-region-dissective-on-third-argument-temporal") .

% If a location-of b then if a is an instance of continuant-fiat-boundary then b is an instance of continuant-fiat-boundary
all p all q all t  ((((locationOf(p,q,t)) & (instanceOf(p,continuantFiatBoundary,t)))) -> (instanceOf(q,continuantFiatBoundary,t))) # label("location-of.continuant-fiat-boundary->continuant-fiat-boundary") .

% located-in and location-of are inverse relations
all t all a all b  ((locatedIn(a,b,t)) <-> (locationOf(b,a,t))) # label("located-in-inverse-of-location-of") .

% occupies-spatial-region is time indexed and has domain: independent-continuant but not spatial-region and range: spatial-region
all a all b all t  ((occupiesSpatialRegion(a,b,t)) -> (((((instanceOf(a,independentContinuant,t)) & (-(instanceOf(a,spatialRegion,t))))) & (instanceOf(b,spatialRegion,t)) & (instanceOf(t,temporalRegion,t))))) # label("occupies-spatial-region-domain-range") .

% occurs-in is dissective on first argumentwhen it is an occurrent
all p all q all r  ((((occursIn(p,q)) & (occurrentPartOf(r,p)))) -> (occursIn(r,q))) # label("occurs-in-dissective-on-first-argument-occurrent") .

% If something is located in something else then the region of the first is part of the region of the second
all a all b all t  ((locatedIn(a,b,t)) -> (exists r1 exists r2 exists t2  (((temporalPartOf(t2,t)) & (occupiesSpatialRegion(a,r1,t2)) & (occupiesSpatialRegion(b,r2,t2)) & (continuantPartOf(r1,r2,t2)))))) # label("when-located-regions-part-of") .

% at all times t, there's a part of t when c occupies-spatial-region r iff every part of c occupies a part of r, and there isn't a smaller part of r that c occupies.
all c all r all t  ((((instanceOf(c,independentContinuant,t)) & (-(instanceOf(c,spatialRegion,t))) & (instanceOf(r,spatialRegion,t)))) -> (exists t2  (((temporalPartOf(t2,t)) & ((occupiesSpatialRegion(c,r,t2)) <-> (((all cp  ((continuantPartOf(cp,c,t2)) -> (all rp  ((occupiesSpatialRegion(cp,rp,t2)) -> (continuantPartOf(rp,r,t2)))))) & (-(exists rprime  (((-((rprime) = (r))) & (continuantPartOf(rprime,r,t2)) & (occupiesSpatialRegion(c,rprime,t2))))))))))))) # label("occupies-spatial-region-exact") .

% No two material entities occupy the same space unless they coincide
all m1 all m2 all s all t  ((((instanceOf(m1,materialEntity,t)) & (occupiesSpatialRegion(m1,s,t)) & (instanceOf(m2,materialEntity,t)) & (occupiesSpatialRegion(m2,s,t)))) -> (((((continuantPartOf(m2,m1,t)) & (continuantPartOf(m1,m2,t)))) | ((m1) = (m2))))) # label("same-space-same-or-coincident-material-entity") .

% located-in is dissective on third argument, a temporal region
all p all q all r all s  ((((locatedIn(p,q,r)) & (temporalPartOf(s,r)))) -> (locatedIn(p,q,s))) # label("located-in-dissective-on-third-argument-temporal") .

% occurs-in and environs are inverse relations
all a all b  ((occursIn(a,b)) <-> (environs(b,a))) # label("occurs-in-inverse-of-environs") .

% If there are two independent continuants that are not spatial regions, and one is part of the other, then it is located in the other
all a all b all t  ((((continuantPartOf(a,b,t)) & (instanceOf(a,independentContinuant,t)) & (-(instanceOf(a,spatialRegion,t))) & (instanceOf(b,independentContinuant,t)) & (-(instanceOf(b,spatialRegion,t))))) -> (locatedIn(a,b,t))) # label("part-of-non-spatial-region-implies-located-in") .

% located-in is dissective on first argumentwhen it is a continuant
all p all q all r all s  ((((locatedIn(p,q,r)) & (continuantPartOf(s,p,r)))) -> (locatedIn(s,q,r))) # label("located-in-dissective-on-first-argument-continuant") .

% spatially-projects-onto is dissective on third argument, a temporal region
all p all q all r all s  ((((spatiallyProjectsOnto(p,q,r)) & (temporalPartOf(s,r)))) -> (spatiallyProjectsOnto(p,q,s))) # label("spatially-projects-onto-dissective-on-third-argument-temporal") .

% located-in is transitive at a time
all a all b all c all t all t2  ((((locatedIn(a,b,t)) & (locatedIn(b,c,t2)) & (temporalPartOf(t,t2)))) -> (locatedIn(a,c,t))) # label("located-in-transitive-at-a-time") .

% located-in is time indexed and has domain: independent-continuant but not spatial-region and range: independent-continuant but not spatial-region
all a all b all t  ((locatedIn(a,b,t)) -> (((((instanceOf(a,independentContinuant,t)) & (-(instanceOf(a,spatialRegion,t))))) & (((instanceOf(b,independentContinuant,t)) & (-(instanceOf(b,spatialRegion,t))))) & (instanceOf(t,temporalRegion,t))))) # label("located-in-domain-range") .



