% BFO 2020 Axiomatization, generated 2021/11/12
% Author: Alan Ruttenberg - alanruttenberg@gmail.com
% The most recent version of this file will always be in the GitHub repository https://github.com/bfo-ontology/bfo-2020
% This work is licensed under a Creative Commons "Attribution 4.0 International" license: https://creativecommons.org/licenses/by/4.0/

% Section: Universal Declaration

set(prolog_style_variables)

% role is a universal
universal(role) # label("role-is-a-universal") .

% site is a universal
universal(site) # label("site-is-a-universal") .

% object is a universal
universal(object) # label("object-is-a-universal") .

% history is a universal
universal(history) # label("history-is-a-universal") .

% process is a universal
universal(process) # label("process-is-a-universal") .

% quality is a universal
universal(quality) # label("quality-is-a-universal") .

% function is a universal
universal(function) # label("function-is-a-universal") .

% fiat-line is a universal
universal(fiatLine) # label("fiat-line-is-a-universal") .

% occurrent is a universal
universal(occurrent) # label("occurrent-is-a-universal") .

% continuant is a universal
universal(continuant) # label("continuant-is-a-universal") .

% fiat-point is a universal
universal(fiatPoint) # label("fiat-point-is-a-universal") .

% disposition is a universal
universal(disposition) # label("disposition-is-a-universal") .

% fiat-surface is a universal
universal(fiatSurface) # label("fiat-surface-is-a-universal") .

% spatial-region is a universal
universal(spatialRegion) # label("spatial-region-is-a-universal") .

% material-entity is a universal
universal(materialEntity) # label("material-entity-is-a-universal") .

% temporal-region is a universal
universal(temporalRegion) # label("temporal-region-is-a-universal") .

% fiat-object-part is a universal
universal(fiatObjectPart) # label("fiat-object-part-is-a-universal") .

% object-aggregate is a universal
universal(objectAggregate) # label("object-aggregate-is-a-universal") .

% process-boundary is a universal
universal(processBoundary) # label("process-boundary-is-a-universal") .

% temporal-instant is a universal
universal(temporalInstant) # label("temporal-instant-is-a-universal") .

% immaterial-entity is a universal
universal(immaterialEntity) # label("immaterial-entity-is-a-universal") .

% realizable-entity is a universal
universal(realizableEntity) # label("realizable-entity-is-a-universal") .

% temporal-interval is a universal
universal(temporalInterval) # label("temporal-interval-is-a-universal") .

% relational-quality is a universal
universal(relationalQuality) # label("relational-quality-is-a-universal") .

% spatiotemporal-region is a universal
universal(spatiotemporalRegion) # label("spatiotemporal-region-is-a-universal") .

% independent-continuant is a universal
universal(independentContinuant) # label("independent-continuant-is-a-universal") .

% continuant-fiat-boundary is a universal
universal(continuantFiatBoundary) # label("continuant-fiat-boundary-is-a-universal") .

% one-dimensional-spatial-region is a universal
universal(oneDimensionalSpatialRegion) # label("one-dimensional-spatial-region-is-a-universal") .

% two-dimensional-spatial-region is a universal
universal(twoDimensionalSpatialRegion) # label("two-dimensional-spatial-region-is-a-universal") .

% one-dimensional-temporal-region is a universal
universal(oneDimensionalTemporalRegion) # label("one-dimensional-temporal-region-is-a-universal") .

% zero-dimensional-spatial-region is a universal
universal(zeroDimensionalSpatialRegion) # label("zero-dimensional-spatial-region-is-a-universal") .

% generically-dependent-continuant is a universal
universal(genericallyDependentContinuant) # label("generically-dependent-continuant-is-a-universal") .

% three-dimensional-spatial-region is a universal
universal(threeDimensionalSpatialRegion) # label("three-dimensional-spatial-region-is-a-universal") .

% zero-dimensional-temporal-region is a universal
universal(zeroDimensionalTemporalRegion) # label("zero-dimensional-temporal-region-is-a-universal") .

% specifically-dependent-continuant is a universal
universal(specificallyDependentContinuant) # label("specifically-dependent-continuant-is-a-universal") .

% universals are not particulars
-(exists x  (((universal(x)) & (particular(x))))) # label("universals-particulars-disjoint") .

% history is subclass of process
all t all x  ((instanceOf(x,history,t)) -> (instanceOf(x,process,t))) # label("history-isa-process") .

% process is subclass of occurrent
all t all x  ((instanceOf(x,process,t)) -> (instanceOf(x,occurrent,t))) # label("process-isa-occurrent") .

% function is subclass of disposition
all t all x  ((instanceOf(x,function,t)) -> (instanceOf(x,disposition,t))) # label("function-isa-disposition") .

% object is subclass of material-entity
all t all x  ((instanceOf(x,object,t)) -> (instanceOf(x,materialEntity,t))) # label("object-isa-material-entity") .

% role is subclass of realizable-entity
all t all x  ((instanceOf(x,role,t)) -> (instanceOf(x,realizableEntity,t))) # label("role-isa-realizable-entity") .

% site is subclass of immaterial-entity
all t all x  ((instanceOf(x,site,t)) -> (instanceOf(x,immaterialEntity,t))) # label("site-isa-immaterial-entity") .

% If something is an instance of temporal region at t, then t is part of that temporal region
all ti all t  ((instanceOf(ti,temporalRegion,t)) -> (temporalPartOf(t,ti))) # label("time-once") .

% temporal-region is subclass of occurrent
all t all x  ((instanceOf(x,temporalRegion,t)) -> (instanceOf(x,occurrent,t))) # label("temporal-region-isa-occurrent") .

% disposition, role are mutually disjoint
((-(exists x exists t  (((instanceOf(x,disposition,t)) & (instanceOf(x,role,t))))))) # label("disposition+role-are-mutually-disjoint") .

% process-boundary is subclass of occurrent
all t all x  ((instanceOf(x,processBoundary,t)) -> (instanceOf(x,occurrent,t))) # label("process-boundary-isa-occurrent") .

% relational-quality is subclass of quality
all t all x  ((instanceOf(x,relationalQuality,t)) -> (instanceOf(x,quality,t))) # label("relational-quality-isa-quality") .

% disposition is subclass of realizable-entity
all t all x  ((instanceOf(x,disposition,t)) -> (instanceOf(x,realizableEntity,t))) # label("disposition-isa-realizable-entity") .

% continuant, occurrent are mutually disjoint
((-(exists x exists t  (((instanceOf(x,continuant,t)) & (instanceOf(x,occurrent,t))))))) # label("continuant+occurrent-are-mutually-disjoint") .

% spatiotemporal-region is subclass of occurrent
all t all x  ((instanceOf(x,spatiotemporalRegion,t)) -> (instanceOf(x,occurrent,t))) # label("spatiotemporal-region-isa-occurrent") .

% fiat-object-part is subclass of material-entity
all t all x  ((instanceOf(x,fiatObjectPart,t)) -> (instanceOf(x,materialEntity,t))) # label("fiat-object-part-isa-material-entity") .

% object-aggregate is subclass of material-entity
all t all x  ((instanceOf(x,objectAggregate,t)) -> (instanceOf(x,materialEntity,t))) # label("object-aggregate-isa-material-entity") .

% spatial-region is subclass of immaterial-entity
all t all x  ((instanceOf(x,spatialRegion,t)) -> (instanceOf(x,immaterialEntity,t))) # label("spatial-region-isa-immaterial-entity") .

% independent-continuant is subclass of continuant
all t all x  ((instanceOf(x,independentContinuant,t)) -> (instanceOf(x,continuant,t))) # label("independent-continuant-isa-continuant") .

% fiat-line is subclass of continuant-fiat-boundary
all t all x  ((instanceOf(x,fiatLine,t)) -> (instanceOf(x,continuantFiatBoundary,t))) # label("fiat-line-isa-continuant-fiat-boundary") .

% quality, realizable-entity are mutually disjoint
((-(exists x exists t  (((instanceOf(x,quality,t)) & (instanceOf(x,realizableEntity,t))))))) # label("quality+realizable-entity-are-mutually-disjoint") .

% fiat-point is subclass of continuant-fiat-boundary
all t all x  ((instanceOf(x,fiatPoint,t)) -> (instanceOf(x,continuantFiatBoundary,t))) # label("fiat-point-isa-continuant-fiat-boundary") .

% fiat-surface is subclass of continuant-fiat-boundary
all t all x  ((instanceOf(x,fiatSurface,t)) -> (instanceOf(x,continuantFiatBoundary,t))) # label("fiat-surface-isa-continuant-fiat-boundary") .

% material-entity is subclass of independent-continuant
all t all x  ((instanceOf(x,materialEntity,t)) -> (instanceOf(x,independentContinuant,t))) # label("material-entity-isa-independent-continuant") .

% immaterial-entity is subclass of independent-continuant
all t all x  ((instanceOf(x,immaterialEntity,t)) -> (instanceOf(x,independentContinuant,t))) # label("immaterial-entity-isa-independent-continuant") .

% quality is subclass of specifically-dependent-continuant
all t all x  ((instanceOf(x,quality,t)) -> (instanceOf(x,specificallyDependentContinuant,t))) # label("quality-isa-specifically-dependent-continuant") .

% continuant-fiat-boundary is subclass of immaterial-entity
all t all x  ((instanceOf(x,continuantFiatBoundary,t)) -> (instanceOf(x,immaterialEntity,t))) # label("continuant-fiat-boundary-isa-immaterial-entity") .

% material-entity, immaterial-entity are mutually disjoint
((-(exists x exists t  (((instanceOf(x,materialEntity,t)) & (instanceOf(x,immaterialEntity,t))))))) # label("material-entity+immaterial-entity-are-mutually-disjoint") .

% generically-dependent-continuant is subclass of continuant
all t all x  ((instanceOf(x,genericallyDependentContinuant,t)) -> (instanceOf(x,continuant,t))) # label("generically-dependent-continuant-isa-continuant") .

% specifically-dependent-continuant is subclass of continuant
all t all x  ((instanceOf(x,specificallyDependentContinuant,t)) -> (instanceOf(x,continuant,t))) # label("specifically-dependent-continuant-isa-continuant") .

% one-dimensional-spatial-region is subclass of spatial-region
all t all x  ((instanceOf(x,oneDimensionalSpatialRegion,t)) -> (instanceOf(x,spatialRegion,t))) # label("one-dimensional-spatial-region-isa-spatial-region") .

% two-dimensional-spatial-region is subclass of spatial-region
all t all x  ((instanceOf(x,twoDimensionalSpatialRegion,t)) -> (instanceOf(x,spatialRegion,t))) # label("two-dimensional-spatial-region-isa-spatial-region") .

% zero-dimensional-spatial-region is subclass of spatial-region
all t all x  ((instanceOf(x,zeroDimensionalSpatialRegion,t)) -> (instanceOf(x,spatialRegion,t))) # label("zero-dimensional-spatial-region-isa-spatial-region") .

% one-dimensional-temporal-region is subclass of temporal-region
all t all x  ((instanceOf(x,oneDimensionalTemporalRegion,t)) -> (instanceOf(x,temporalRegion,t))) # label("one-dimensional-temporal-region-isa-temporal-region") .

% three-dimensional-spatial-region is subclass of spatial-region
all t all x  ((instanceOf(x,threeDimensionalSpatialRegion,t)) -> (instanceOf(x,spatialRegion,t))) # label("three-dimensional-spatial-region-isa-spatial-region") .

% zero-dimensional-temporal-region is subclass of temporal-region
all t all x  ((instanceOf(x,zeroDimensionalTemporalRegion,t)) -> (instanceOf(x,temporalRegion,t))) # label("zero-dimensional-temporal-region-isa-temporal-region") .

% temporal-instant is subclass of zero-dimensional-temporal-region
all t all x  ((instanceOf(x,temporalInstant,t)) -> (instanceOf(x,zeroDimensionalTemporalRegion,t))) # label("temporal-instant-isa-zero-dimensional-temporal-region") .

% temporal-interval is subclass of one-dimensional-temporal-region
all t all x  ((instanceOf(x,temporalInterval,t)) -> (instanceOf(x,oneDimensionalTemporalRegion,t))) # label("temporal-interval-isa-one-dimensional-temporal-region") .

% Entity is either universal or particular, so not all are instantiated. Instead make a predicate 'entity' analogous to particular universal
all x  ((exists t  (((instanceOf(x,continuant,t)) | (instanceOf(x,occurrent,t))))) -> (entity(x))) # label("entity-predicate") .

% realizable-entity is subclass of specifically-dependent-continuant
all t all x  ((instanceOf(x,realizableEntity,t)) -> (instanceOf(x,specificallyDependentContinuant,t))) # label("realizable-entity-isa-specifically-dependent-continuant") .

% If something is a role at any time then as long as it exists it is a role.
all x  ((exists t  (instanceOf(x,role,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,role,t))))) # label("role-is-rigid") .

% If something is a site at any time then as long as it exists it is a site.
all x  ((exists t  (instanceOf(x,site,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,site,t))))) # label("site-is-rigid") .

% If something is a quality at any time then as long as it exists it is a quality.
all x  ((exists t  (instanceOf(x,quality,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,quality,t))))) # label("quality-is-rigid") .

% If something is a function at any time then as long as it exists it is a function.
all x  ((exists t  (instanceOf(x,function,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,function,t))))) # label("function-is-rigid") .

% one-dimensional-temporal-region, zero-dimensional-temporal-region are mutually disjoint
((-(exists x exists t  (((instanceOf(x,oneDimensionalTemporalRegion,t)) & (instanceOf(x,zeroDimensionalTemporalRegion,t))))))) # label("one-dimensional-temporal-region+zero-dimensional-temporal-region-are-mutually-disjoint") .

% If something is a fiat-line at any time then as long as it exists it is a fiat-line.
all x  ((exists t  (instanceOf(x,fiatLine,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,fiatLine,t))))) # label("fiat-line-is-rigid") .

% If something is a continuant at any time then as long as it exists it is a continuant.
all x  ((exists t  (instanceOf(x,continuant,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,continuant,t))))) # label("continuant-is-rigid") .

% If something is a fiat-point at any time then as long as it exists it is a fiat-point.
all x  ((exists t  (instanceOf(x,fiatPoint,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,fiatPoint,t))))) # label("fiat-point-is-rigid") .

% If something is a disposition at any time then as long as it exists it is a disposition.
all x  ((exists t  (instanceOf(x,disposition,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,disposition,t))))) # label("disposition-is-rigid") .

% If something is a fiat-surface at any time then as long as it exists it is a fiat-surface.
all x  ((exists t  (instanceOf(x,fiatSurface,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,fiatSurface,t))))) # label("fiat-surface-is-rigid") .

% If something is a spatial-region at any time then as long as it exists it is a spatial-region.
all x  ((exists t  (instanceOf(x,spatialRegion,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,spatialRegion,t))))) # label("spatial-region-is-rigid") .

% If something is a material-entity at any time then as long as it exists it is a material-entity.
all x  ((exists t  (instanceOf(x,materialEntity,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,materialEntity,t))))) # label("material-entity-is-rigid") .

% If something is a immaterial-entity at any time then as long as it exists it is a immaterial-entity.
all x  ((exists t  (instanceOf(x,immaterialEntity,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,immaterialEntity,t))))) # label("immaterial-entity-is-rigid") .

% If something is a realizable-entity at any time then as long as it exists it is a realizable-entity.
all x  ((exists t  (instanceOf(x,realizableEntity,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,realizableEntity,t))))) # label("realizable-entity-is-rigid") .

% If something is a relational-quality at any time then as long as it exists it is a relational-quality.
all x  ((exists t  (instanceOf(x,relationalQuality,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,relationalQuality,t))))) # label("relational-quality-is-rigid") .

% If something is a independent-continuant at any time then as long as it exists it is a independent-continuant.
all x  ((exists t  (instanceOf(x,independentContinuant,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,independentContinuant,t))))) # label("independent-continuant-is-rigid") .

% If something is a continuant-fiat-boundary at any time then as long as it exists it is a continuant-fiat-boundary.
all x  ((exists t  (instanceOf(x,continuantFiatBoundary,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,continuantFiatBoundary,t))))) # label("continuant-fiat-boundary-is-rigid") .

% If something is a one-dimensional-spatial-region at any time then as long as it exists it is a one-dimensional-spatial-region.
all x  ((exists t  (instanceOf(x,oneDimensionalSpatialRegion,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,oneDimensionalSpatialRegion,t))))) # label("one-dimensional-spatial-region-is-rigid") .

% If something is a two-dimensional-spatial-region at any time then as long as it exists it is a two-dimensional-spatial-region.
all x  ((exists t  (instanceOf(x,twoDimensionalSpatialRegion,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,twoDimensionalSpatialRegion,t))))) # label("two-dimensional-spatial-region-is-rigid") .

% If something is a zero-dimensional-spatial-region at any time then as long as it exists it is a zero-dimensional-spatial-region.
all x  ((exists t  (instanceOf(x,zeroDimensionalSpatialRegion,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,zeroDimensionalSpatialRegion,t))))) # label("zero-dimensional-spatial-region-is-rigid") .

% If something is a generically-dependent-continuant at any time then as long as it exists it is a generically-dependent-continuant.
all x  ((exists t  (instanceOf(x,genericallyDependentContinuant,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,genericallyDependentContinuant,t))))) # label("generically-dependent-continuant-is-rigid") .

% If something is a three-dimensional-spatial-region at any time then as long as it exists it is a three-dimensional-spatial-region.
all x  ((exists t  (instanceOf(x,threeDimensionalSpatialRegion,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,threeDimensionalSpatialRegion,t))))) # label("three-dimensional-spatial-region-is-rigid") .

% If something is a specifically-dependent-continuant at any time then as long as it exists it is a specifically-dependent-continuant.
all x  ((exists t  (instanceOf(x,specificallyDependentContinuant,t))) -> (all t  ((existsAt(x,t)) -> (instanceOf(x,specificallyDependentContinuant,t))))) # label("specifically-dependent-continuant-is-rigid") .

% No occurrent changes type during its existence
all o  ((exists t  (instanceOf(o,occurrent,t))) -> (all u  ((exists t  (instanceOf(o,u,t))) -> (all t  ((instanceOf(o,occurrent,t)) <-> (instanceOf(o,u,t))))))) # label("all-occurrent-types-are-rigid") .

% fiat-surface, fiat-line, fiat-point are mutually disjoint
((-(exists x exists t  (((instanceOf(x,fiatSurface,t)) & (instanceOf(x,fiatLine,t)))))) & (-(exists x exists t  (((instanceOf(x,fiatSurface,t)) & (instanceOf(x,fiatPoint,t)))))) & (-(exists x exists t  (((instanceOf(x,fiatLine,t)) & (instanceOf(x,fiatPoint,t))))))) # label("fiat-surface+fiat-line+fiat-point-are-mutually-disjoint") .

% site, spatial-region, continuant-fiat-boundary are mutually disjoint
((-(exists x exists t  (((instanceOf(x,site,t)) & (instanceOf(x,spatialRegion,t)))))) & (-(exists x exists t  (((instanceOf(x,site,t)) & (instanceOf(x,continuantFiatBoundary,t)))))) & (-(exists x exists t  (((instanceOf(x,spatialRegion,t)) & (instanceOf(x,continuantFiatBoundary,t))))))) # label("site+spatial-region+continuant-fiat-boundary-are-mutually-disjoint") .

% specifically-dependent-continuant, independent-continuant, generically-dependent-continuant are mutually disjoint
((-(exists x exists t  (((instanceOf(x,specificallyDependentContinuant,t)) & (instanceOf(x,independentContinuant,t)))))) & (-(exists x exists t  (((instanceOf(x,specificallyDependentContinuant,t)) & (instanceOf(x,genericallyDependentContinuant,t)))))) & (-(exists x exists t  (((instanceOf(x,independentContinuant,t)) & (instanceOf(x,genericallyDependentContinuant,t))))))) # label("specifically-dependent-continuant+independent-continuant+generically-dependent-continuant-are-mutually-disjoint") .

% process, spatiotemporal-region, process-boundary, temporal-region are mutually disjoint
((-(exists x exists t  (((instanceOf(x,process,t)) & (instanceOf(x,spatiotemporalRegion,t)))))) & (-(exists x exists t  (((instanceOf(x,process,t)) & (instanceOf(x,processBoundary,t)))))) & (-(exists x exists t  (((instanceOf(x,process,t)) & (instanceOf(x,temporalRegion,t)))))) & (-(exists x exists t  (((instanceOf(x,spatiotemporalRegion,t)) & (instanceOf(x,processBoundary,t)))))) & (-(exists x exists t  (((instanceOf(x,spatiotemporalRegion,t)) & (instanceOf(x,temporalRegion,t)))))) & (-(exists x exists t  (((instanceOf(x,processBoundary,t)) & (instanceOf(x,temporalRegion,t))))))) # label("process+spatiotemporal-region+process-boundary+temporal-region-are-mutually-disjoint") .

% continuant, material-entity, object, fiat-object-part, object-aggregate, site, immaterial-entity, continuant-fiat-boundary, fiat-surface, fiat-line, fiat-point, spatial-region, three-dimensional-spatial-region, two-dimensional-spatial-region, one-dimensional-spatial-region, zero-dimensional-spatial-region, independent-continuant, generically-dependent-continuant, specifically-dependent-continuant, quality, relational-quality, function, disposition, realizable-entity, role, occurrent, process, process-boundary, temporal-region, zero-dimensional-temporal-region, temporal-instant, one-dimensional-temporal-region, temporal-interval, history, spatiotemporal-region are all different
((-((continuant) = (materialEntity))) & (-((continuant) = (object))) & (-((continuant) = (fiatObjectPart))) & (-((continuant) = (objectAggregate))) & (-((continuant) = (site))) & (-((continuant) = (immaterialEntity))) & (-((continuant) = (continuantFiatBoundary))) & (-((continuant) = (fiatSurface))) & (-((continuant) = (fiatLine))) & (-((continuant) = (fiatPoint))) & (-((continuant) = (spatialRegion))) & (-((continuant) = (threeDimensionalSpatialRegion))) & (-((continuant) = (twoDimensionalSpatialRegion))) & (-((continuant) = (oneDimensionalSpatialRegion))) & (-((continuant) = (zeroDimensionalSpatialRegion))) & (-((continuant) = (independentContinuant))) & (-((continuant) = (genericallyDependentContinuant))) & (-((continuant) = (specificallyDependentContinuant))) & (-((continuant) = (quality))) & (-((continuant) = (relationalQuality))) & (-((continuant) = (function))) & (-((continuant) = (disposition))) & (-((continuant) = (realizableEntity))) & (-((continuant) = (role))) & (-((continuant) = (occurrent))) & (-((continuant) = (process))) & (-((continuant) = (processBoundary))) & (-((continuant) = (temporalRegion))) & (-((continuant) = (zeroDimensionalTemporalRegion))) & (-((continuant) = (temporalInstant))) & (-((continuant) = (oneDimensionalTemporalRegion))) & (-((continuant) = (temporalInterval))) & (-((continuant) = (history))) & (-((continuant) = (spatiotemporalRegion))) & (-((materialEntity) = (object))) & (-((materialEntity) = (fiatObjectPart))) & (-((materialEntity) = (objectAggregate))) & (-((materialEntity) = (site))) & (-((materialEntity) = (immaterialEntity))) & (-((materialEntity) = (continuantFiatBoundary))) & (-((materialEntity) = (fiatSurface))) & (-((materialEntity) = (fiatLine))) & (-((materialEntity) = (fiatPoint))) & (-((materialEntity) = (spatialRegion))) & (-((materialEntity) = (threeDimensionalSpatialRegion))) & (-((materialEntity) = (twoDimensionalSpatialRegion))) & (-((materialEntity) = (oneDimensionalSpatialRegion))) & (-((materialEntity) = (zeroDimensionalSpatialRegion))) & (-((materialEntity) = (independentContinuant))) & (-((materialEntity) = (genericallyDependentContinuant))) & (-((materialEntity) = (specificallyDependentContinuant))) & (-((materialEntity) = (quality))) & (-((materialEntity) = (relationalQuality))) & (-((materialEntity) = (function))) & (-((materialEntity) = (disposition))) & (-((materialEntity) = (realizableEntity))) & (-((materialEntity) = (role))) & (-((materialEntity) = (occurrent))) & (-((materialEntity) = (process))) & (-((materialEntity) = (processBoundary))) & (-((materialEntity) = (temporalRegion))) & (-((materialEntity) = (zeroDimensionalTemporalRegion))) & (-((materialEntity) = (temporalInstant))) & (-((materialEntity) = (oneDimensionalTemporalRegion))) & (-((materialEntity) = (temporalInterval))) & (-((materialEntity) = (history))) & (-((materialEntity) = (spatiotemporalRegion))) & (-((object) = (fiatObjectPart))) & (-((object) = (objectAggregate))) & (-((object) = (site))) & (-((object) = (immaterialEntity))) & (-((object) = (continuantFiatBoundary))) & (-((object) = (fiatSurface))) & (-((object) = (fiatLine))) & (-((object) = (fiatPoint))) & (-((object) = (spatialRegion))) & (-((object) = (threeDimensionalSpatialRegion))) & (-((object) = (twoDimensionalSpatialRegion))) & (-((object) = (oneDimensionalSpatialRegion))) & (-((object) = (zeroDimensionalSpatialRegion))) & (-((object) = (independentContinuant))) & (-((object) = (genericallyDependentContinuant))) & (-((object) = (specificallyDependentContinuant))) & (-((object) = (quality))) & (-((object) = (relationalQuality))) & (-((object) = (function))) & (-((object) = (disposition))) & (-((object) = (realizableEntity))) & (-((object) = (role))) & (-((object) = (occurrent))) & (-((object) = (process))) & (-((object) = (processBoundary))) & (-((object) = (temporalRegion))) & (-((object) = (zeroDimensionalTemporalRegion))) & (-((object) = (temporalInstant))) & (-((object) = (oneDimensionalTemporalRegion))) & (-((object) = (temporalInterval))) & (-((object) = (history))) & (-((object) = (spatiotemporalRegion))) & (-((fiatObjectPart) = (objectAggregate))) & (-((fiatObjectPart) = (site))) & (-((fiatObjectPart) = (immaterialEntity))) & (-((fiatObjectPart) = (continuantFiatBoundary))) & (-((fiatObjectPart) = (fiatSurface))) & (-((fiatObjectPart) = (fiatLine))) & (-((fiatObjectPart) = (fiatPoint))) & (-((fiatObjectPart) = (spatialRegion))) & (-((fiatObjectPart) = (threeDimensionalSpatialRegion))) & (-((fiatObjectPart) = (twoDimensionalSpatialRegion))) & (-((fiatObjectPart) = (oneDimensionalSpatialRegion))) & (-((fiatObjectPart) = (zeroDimensionalSpatialRegion))) & (-((fiatObjectPart) = (independentContinuant))) & (-((fiatObjectPart) = (genericallyDependentContinuant))) & (-((fiatObjectPart) = (specificallyDependentContinuant))) & (-((fiatObjectPart) = (quality))) & (-((fiatObjectPart) = (relationalQuality))) & (-((fiatObjectPart) = (function))) & (-((fiatObjectPart) = (disposition))) & (-((fiatObjectPart) = (realizableEntity))) & (-((fiatObjectPart) = (role))) & (-((fiatObjectPart) = (occurrent))) & (-((fiatObjectPart) = (process))) & (-((fiatObjectPart) = (processBoundary))) & (-((fiatObjectPart) = (temporalRegion))) & (-((fiatObjectPart) = (zeroDimensionalTemporalRegion))) & (-((fiatObjectPart) = (temporalInstant))) & (-((fiatObjectPart) = (oneDimensionalTemporalRegion))) & (-((fiatObjectPart) = (temporalInterval))) & (-((fiatObjectPart) = (history))) & (-((fiatObjectPart) = (spatiotemporalRegion))) & (-((objectAggregate) = (site))) & (-((objectAggregate) = (immaterialEntity))) & (-((objectAggregate) = (continuantFiatBoundary))) & (-((objectAggregate) = (fiatSurface))) & (-((objectAggregate) = (fiatLine))) & (-((objectAggregate) = (fiatPoint))) & (-((objectAggregate) = (spatialRegion))) & (-((objectAggregate) = (threeDimensionalSpatialRegion))) & (-((objectAggregate) = (twoDimensionalSpatialRegion))) & (-((objectAggregate) = (oneDimensionalSpatialRegion))) & (-((objectAggregate) = (zeroDimensionalSpatialRegion))) & (-((objectAggregate) = (independentContinuant))) & (-((objectAggregate) = (genericallyDependentContinuant))) & (-((objectAggregate) = (specificallyDependentContinuant))) & (-((objectAggregate) = (quality))) & (-((objectAggregate) = (relationalQuality))) & (-((objectAggregate) = (function))) & (-((objectAggregate) = (disposition))) & (-((objectAggregate) = (realizableEntity))) & (-((objectAggregate) = (role))) & (-((objectAggregate) = (occurrent))) & (-((objectAggregate) = (process))) & (-((objectAggregate) = (processBoundary))) & (-((objectAggregate) = (temporalRegion))) & (-((objectAggregate) = (zeroDimensionalTemporalRegion))) & (-((objectAggregate) = (temporalInstant))) & (-((objectAggregate) = (oneDimensionalTemporalRegion))) & (-((objectAggregate) = (temporalInterval))) & (-((objectAggregate) = (history))) & (-((objectAggregate) = (spatiotemporalRegion))) & (-((site) = (immaterialEntity))) & (-((site) = (continuantFiatBoundary))) & (-((site) = (fiatSurface))) & (-((site) = (fiatLine))) & (-((site) = (fiatPoint))) & (-((site) = (spatialRegion))) & (-((site) = (threeDimensionalSpatialRegion))) & (-((site) = (twoDimensionalSpatialRegion))) & (-((site) = (oneDimensionalSpatialRegion))) & (-((site) = (zeroDimensionalSpatialRegion))) & (-((site) = (independentContinuant))) & (-((site) = (genericallyDependentContinuant))) & (-((site) = (specificallyDependentContinuant))) & (-((site) = (quality))) & (-((site) = (relationalQuality))) & (-((site) = (function))) & (-((site) = (disposition))) & (-((site) = (realizableEntity))) & (-((site) = (role))) & (-((site) = (occurrent))) & (-((site) = (process))) & (-((site) = (processBoundary))) & (-((site) = (temporalRegion))) & (-((site) = (zeroDimensionalTemporalRegion))) & (-((site) = (temporalInstant))) & (-((site) = (oneDimensionalTemporalRegion))) & (-((site) = (temporalInterval))) & (-((site) = (history))) & (-((site) = (spatiotemporalRegion))) & (-((immaterialEntity) = (continuantFiatBoundary))) & (-((immaterialEntity) = (fiatSurface))) & (-((immaterialEntity) = (fiatLine))) & (-((immaterialEntity) = (fiatPoint))) & (-((immaterialEntity) = (spatialRegion))) & (-((immaterialEntity) = (threeDimensionalSpatialRegion))) & (-((immaterialEntity) = (twoDimensionalSpatialRegion))) & (-((immaterialEntity) = (oneDimensionalSpatialRegion))) & (-((immaterialEntity) = (zeroDimensionalSpatialRegion))) & (-((immaterialEntity) = (independentContinuant))) & (-((immaterialEntity) = (genericallyDependentContinuant))) & (-((immaterialEntity) = (specificallyDependentContinuant))) & (-((immaterialEntity) = (quality))) & (-((immaterialEntity) = (relationalQuality))) & (-((immaterialEntity) = (function))) & (-((immaterialEntity) = (disposition))) & (-((immaterialEntity) = (realizableEntity))) & (-((immaterialEntity) = (role))) & (-((immaterialEntity) = (occurrent))) & (-((immaterialEntity) = (process))) & (-((immaterialEntity) = (processBoundary))) & (-((immaterialEntity) = (temporalRegion))) & (-((immaterialEntity) = (zeroDimensionalTemporalRegion))) & (-((immaterialEntity) = (temporalInstant))) & (-((immaterialEntity) = (oneDimensionalTemporalRegion))) & (-((immaterialEntity) = (temporalInterval))) & (-((immaterialEntity) = (history))) & (-((immaterialEntity) = (spatiotemporalRegion))) & (-((continuantFiatBoundary) = (fiatSurface))) & (-((continuantFiatBoundary) = (fiatLine))) & (-((continuantFiatBoundary) = (fiatPoint))) & (-((continuantFiatBoundary) = (spatialRegion))) & (-((continuantFiatBoundary) = (threeDimensionalSpatialRegion))) & (-((continuantFiatBoundary) = (twoDimensionalSpatialRegion))) & (-((continuantFiatBoundary) = (oneDimensionalSpatialRegion))) & (-((continuantFiatBoundary) = (zeroDimensionalSpatialRegion))) & (-((continuantFiatBoundary) = (independentContinuant))) & (-((continuantFiatBoundary) = (genericallyDependentContinuant))) & (-((continuantFiatBoundary) = (specificallyDependentContinuant))) & (-((continuantFiatBoundary) = (quality))) & (-((continuantFiatBoundary) = (relationalQuality))) & (-((continuantFiatBoundary) = (function))) & (-((continuantFiatBoundary) = (disposition))) & (-((continuantFiatBoundary) = (realizableEntity))) & (-((continuantFiatBoundary) = (role))) & (-((continuantFiatBoundary) = (occurrent))) & (-((continuantFiatBoundary) = (process))) & (-((continuantFiatBoundary) = (processBoundary))) & (-((continuantFiatBoundary) = (temporalRegion))) & (-((continuantFiatBoundary) = (zeroDimensionalTemporalRegion))) & (-((continuantFiatBoundary) = (temporalInstant))) & (-((continuantFiatBoundary) = (oneDimensionalTemporalRegion))) & (-((continuantFiatBoundary) = (temporalInterval))) & (-((continuantFiatBoundary) = (history))) & (-((continuantFiatBoundary) = (spatiotemporalRegion))) & (-((fiatSurface) = (fiatLine))) & (-((fiatSurface) = (fiatPoint))) & (-((fiatSurface) = (spatialRegion))) & (-((fiatSurface) = (threeDimensionalSpatialRegion))) & (-((fiatSurface) = (twoDimensionalSpatialRegion))) & (-((fiatSurface) = (oneDimensionalSpatialRegion))) & (-((fiatSurface) = (zeroDimensionalSpatialRegion))) & (-((fiatSurface) = (independentContinuant))) & (-((fiatSurface) = (genericallyDependentContinuant))) & (-((fiatSurface) = (specificallyDependentContinuant))) & (-((fiatSurface) = (quality))) & (-((fiatSurface) = (relationalQuality))) & (-((fiatSurface) = (function))) & (-((fiatSurface) = (disposition))) & (-((fiatSurface) = (realizableEntity))) & (-((fiatSurface) = (role))) & (-((fiatSurface) = (occurrent))) & (-((fiatSurface) = (process))) & (-((fiatSurface) = (processBoundary))) & (-((fiatSurface) = (temporalRegion))) & (-((fiatSurface) = (zeroDimensionalTemporalRegion))) & (-((fiatSurface) = (temporalInstant))) & (-((fiatSurface) = (oneDimensionalTemporalRegion))) & (-((fiatSurface) = (temporalInterval))) & (-((fiatSurface) = (history))) & (-((fiatSurface) = (spatiotemporalRegion))) & (-((fiatLine) = (fiatPoint))) & (-((fiatLine) = (spatialRegion))) & (-((fiatLine) = (threeDimensionalSpatialRegion))) & (-((fiatLine) = (twoDimensionalSpatialRegion))) & (-((fiatLine) = (oneDimensionalSpatialRegion))) & (-((fiatLine) = (zeroDimensionalSpatialRegion))) & (-((fiatLine) = (independentContinuant))) & (-((fiatLine) = (genericallyDependentContinuant))) & (-((fiatLine) = (specificallyDependentContinuant))) & (-((fiatLine) = (quality))) & (-((fiatLine) = (relationalQuality))) & (-((fiatLine) = (function))) & (-((fiatLine) = (disposition))) & (-((fiatLine) = (realizableEntity))) & (-((fiatLine) = (role))) & (-((fiatLine) = (occurrent))) & (-((fiatLine) = (process))) & (-((fiatLine) = (processBoundary))) & (-((fiatLine) = (temporalRegion))) & (-((fiatLine) = (zeroDimensionalTemporalRegion))) & (-((fiatLine) = (temporalInstant))) & (-((fiatLine) = (oneDimensionalTemporalRegion))) & (-((fiatLine) = (temporalInterval))) & (-((fiatLine) = (history))) & (-((fiatLine) = (spatiotemporalRegion))) & (-((fiatPoint) = (spatialRegion))) & (-((fiatPoint) = (threeDimensionalSpatialRegion))) & (-((fiatPoint) = (twoDimensionalSpatialRegion))) & (-((fiatPoint) = (oneDimensionalSpatialRegion))) & (-((fiatPoint) = (zeroDimensionalSpatialRegion))) & (-((fiatPoint) = (independentContinuant))) & (-((fiatPoint) = (genericallyDependentContinuant))) & (-((fiatPoint) = (specificallyDependentContinuant))) & (-((fiatPoint) = (quality))) & (-((fiatPoint) = (relationalQuality))) & (-((fiatPoint) = (function))) & (-((fiatPoint) = (disposition))) & (-((fiatPoint) = (realizableEntity))) & (-((fiatPoint) = (role))) & (-((fiatPoint) = (occurrent))) & (-((fiatPoint) = (process))) & (-((fiatPoint) = (processBoundary))) & (-((fiatPoint) = (temporalRegion))) & (-((fiatPoint) = (zeroDimensionalTemporalRegion))) & (-((fiatPoint) = (temporalInstant))) & (-((fiatPoint) = (oneDimensionalTemporalRegion))) & (-((fiatPoint) = (temporalInterval))) & (-((fiatPoint) = (history))) & (-((fiatPoint) = (spatiotemporalRegion))) & (-((spatialRegion) = (threeDimensionalSpatialRegion))) & (-((spatialRegion) = (twoDimensionalSpatialRegion))) & (-((spatialRegion) = (oneDimensionalSpatialRegion))) & (-((spatialRegion) = (zeroDimensionalSpatialRegion))) & (-((spatialRegion) = (independentContinuant))) & (-((spatialRegion) = (genericallyDependentContinuant))) & (-((spatialRegion) = (specificallyDependentContinuant))) & (-((spatialRegion) = (quality))) & (-((spatialRegion) = (relationalQuality))) & (-((spatialRegion) = (function))) & (-((spatialRegion) = (disposition))) & (-((spatialRegion) = (realizableEntity))) & (-((spatialRegion) = (role))) & (-((spatialRegion) = (occurrent))) & (-((spatialRegion) = (process))) & (-((spatialRegion) = (processBoundary))) & (-((spatialRegion) = (temporalRegion))) & (-((spatialRegion) = (zeroDimensionalTemporalRegion))) & (-((spatialRegion) = (temporalInstant))) & (-((spatialRegion) = (oneDimensionalTemporalRegion))) & (-((spatialRegion) = (temporalInterval))) & (-((spatialRegion) = (history))) & (-((spatialRegion) = (spatiotemporalRegion))) & (-((threeDimensionalSpatialRegion) = (twoDimensionalSpatialRegion))) & (-((threeDimensionalSpatialRegion) = (oneDimensionalSpatialRegion))) & (-((threeDimensionalSpatialRegion) = (zeroDimensionalSpatialRegion))) & (-((threeDimensionalSpatialRegion) = (independentContinuant))) & (-((threeDimensionalSpatialRegion) = (genericallyDependentContinuant))) & (-((threeDimensionalSpatialRegion) = (specificallyDependentContinuant))) & (-((threeDimensionalSpatialRegion) = (quality))) & (-((threeDimensionalSpatialRegion) = (relationalQuality))) & (-((threeDimensionalSpatialRegion) = (function))) & (-((threeDimensionalSpatialRegion) = (disposition))) & (-((threeDimensionalSpatialRegion) = (realizableEntity))) & (-((threeDimensionalSpatialRegion) = (role))) & (-((threeDimensionalSpatialRegion) = (occurrent))) & (-((threeDimensionalSpatialRegion) = (process))) & (-((threeDimensionalSpatialRegion) = (processBoundary))) & (-((threeDimensionalSpatialRegion) = (temporalRegion))) & (-((threeDimensionalSpatialRegion) = (zeroDimensionalTemporalRegion))) & (-((threeDimensionalSpatialRegion) = (temporalInstant))) & (-((threeDimensionalSpatialRegion) = (oneDimensionalTemporalRegion))) & (-((threeDimensionalSpatialRegion) = (temporalInterval))) & (-((threeDimensionalSpatialRegion) = (history))) & (-((threeDimensionalSpatialRegion) = (spatiotemporalRegion))) & (-((twoDimensionalSpatialRegion) = (oneDimensionalSpatialRegion))) & (-((twoDimensionalSpatialRegion) = (zeroDimensionalSpatialRegion))) & (-((twoDimensionalSpatialRegion) = (independentContinuant))) & (-((twoDimensionalSpatialRegion) = (genericallyDependentContinuant))) & (-((twoDimensionalSpatialRegion) = (specificallyDependentContinuant))) & (-((twoDimensionalSpatialRegion) = (quality))) & (-((twoDimensionalSpatialRegion) = (relationalQuality))) & (-((twoDimensionalSpatialRegion) = (function))) & (-((twoDimensionalSpatialRegion) = (disposition))) & (-((twoDimensionalSpatialRegion) = (realizableEntity))) & (-((twoDimensionalSpatialRegion) = (role))) & (-((twoDimensionalSpatialRegion) = (occurrent))) & (-((twoDimensionalSpatialRegion) = (process))) & (-((twoDimensionalSpatialRegion) = (processBoundary))) & (-((twoDimensionalSpatialRegion) = (temporalRegion))) & (-((twoDimensionalSpatialRegion) = (zeroDimensionalTemporalRegion))) & (-((twoDimensionalSpatialRegion) = (temporalInstant))) & (-((twoDimensionalSpatialRegion) = (oneDimensionalTemporalRegion))) & (-((twoDimensionalSpatialRegion) = (temporalInterval))) & (-((twoDimensionalSpatialRegion) = (history))) & (-((twoDimensionalSpatialRegion) = (spatiotemporalRegion))) & (-((oneDimensionalSpatialRegion) = (zeroDimensionalSpatialRegion))) & (-((oneDimensionalSpatialRegion) = (independentContinuant))) & (-((oneDimensionalSpatialRegion) = (genericallyDependentContinuant))) & (-((oneDimensionalSpatialRegion) = (specificallyDependentContinuant))) & (-((oneDimensionalSpatialRegion) = (quality))) & (-((oneDimensionalSpatialRegion) = (relationalQuality))) & (-((oneDimensionalSpatialRegion) = (function))) & (-((oneDimensionalSpatialRegion) = (disposition))) & (-((oneDimensionalSpatialRegion) = (realizableEntity))) & (-((oneDimensionalSpatialRegion) = (role))) & (-((oneDimensionalSpatialRegion) = (occurrent))) & (-((oneDimensionalSpatialRegion) = (process))) & (-((oneDimensionalSpatialRegion) = (processBoundary))) & (-((oneDimensionalSpatialRegion) = (temporalRegion))) & (-((oneDimensionalSpatialRegion) = (zeroDimensionalTemporalRegion))) & (-((oneDimensionalSpatialRegion) = (temporalInstant))) & (-((oneDimensionalSpatialRegion) = (oneDimensionalTemporalRegion))) & (-((oneDimensionalSpatialRegion) = (temporalInterval))) & (-((oneDimensionalSpatialRegion) = (history))) & (-((oneDimensionalSpatialRegion) = (spatiotemporalRegion))) & (-((zeroDimensionalSpatialRegion) = (independentContinuant))) & (-((zeroDimensionalSpatialRegion) = (genericallyDependentContinuant))) & (-((zeroDimensionalSpatialRegion) = (specificallyDependentContinuant))) & (-((zeroDimensionalSpatialRegion) = (quality))) & (-((zeroDimensionalSpatialRegion) = (relationalQuality))) & (-((zeroDimensionalSpatialRegion) = (function))) & (-((zeroDimensionalSpatialRegion) = (disposition))) & (-((zeroDimensionalSpatialRegion) = (realizableEntity))) & (-((zeroDimensionalSpatialRegion) = (role))) & (-((zeroDimensionalSpatialRegion) = (occurrent))) & (-((zeroDimensionalSpatialRegion) = (process))) & (-((zeroDimensionalSpatialRegion) = (processBoundary))) & (-((zeroDimensionalSpatialRegion) = (temporalRegion))) & (-((zeroDimensionalSpatialRegion) = (zeroDimensionalTemporalRegion))) & (-((zeroDimensionalSpatialRegion) = (temporalInstant))) & (-((zeroDimensionalSpatialRegion) = (oneDimensionalTemporalRegion))) & (-((zeroDimensionalSpatialRegion) = (temporalInterval))) & (-((zeroDimensionalSpatialRegion) = (history))) & (-((zeroDimensionalSpatialRegion) = (spatiotemporalRegion))) & (-((independentContinuant) = (genericallyDependentContinuant))) & (-((independentContinuant) = (specificallyDependentContinuant))) & (-((independentContinuant) = (quality))) & (-((independentContinuant) = (relationalQuality))) & (-((independentContinuant) = (function))) & (-((independentContinuant) = (disposition))) & (-((independentContinuant) = (realizableEntity))) & (-((independentContinuant) = (role))) & (-((independentContinuant) = (occurrent))) & (-((independentContinuant) = (process))) & (-((independentContinuant) = (processBoundary))) & (-((independentContinuant) = (temporalRegion))) & (-((independentContinuant) = (zeroDimensionalTemporalRegion))) & (-((independentContinuant) = (temporalInstant))) & (-((independentContinuant) = (oneDimensionalTemporalRegion))) & (-((independentContinuant) = (temporalInterval))) & (-((independentContinuant) = (history))) & (-((independentContinuant) = (spatiotemporalRegion))) & (-((genericallyDependentContinuant) = (specificallyDependentContinuant))) & (-((genericallyDependentContinuant) = (quality))) & (-((genericallyDependentContinuant) = (relationalQuality))) & (-((genericallyDependentContinuant) = (function))) & (-((genericallyDependentContinuant) = (disposition))) & (-((genericallyDependentContinuant) = (realizableEntity))) & (-((genericallyDependentContinuant) = (role))) & (-((genericallyDependentContinuant) = (occurrent))) & (-((genericallyDependentContinuant) = (process))) & (-((genericallyDependentContinuant) = (processBoundary))) & (-((genericallyDependentContinuant) = (temporalRegion))) & (-((genericallyDependentContinuant) = (zeroDimensionalTemporalRegion))) & (-((genericallyDependentContinuant) = (temporalInstant))) & (-((genericallyDependentContinuant) = (oneDimensionalTemporalRegion))) & (-((genericallyDependentContinuant) = (temporalInterval))) & (-((genericallyDependentContinuant) = (history))) & (-((genericallyDependentContinuant) = (spatiotemporalRegion))) & (-((specificallyDependentContinuant) = (quality))) & (-((specificallyDependentContinuant) = (relationalQuality))) & (-((specificallyDependentContinuant) = (function))) & (-((specificallyDependentContinuant) = (disposition))) & (-((specificallyDependentContinuant) = (realizableEntity))) & (-((specificallyDependentContinuant) = (role))) & (-((specificallyDependentContinuant) = (occurrent))) & (-((specificallyDependentContinuant) = (process))) & (-((specificallyDependentContinuant) = (processBoundary))) & (-((specificallyDependentContinuant) = (temporalRegion))) & (-((specificallyDependentContinuant) = (zeroDimensionalTemporalRegion))) & (-((specificallyDependentContinuant) = (temporalInstant))) & (-((specificallyDependentContinuant) = (oneDimensionalTemporalRegion))) & (-((specificallyDependentContinuant) = (temporalInterval))) & (-((specificallyDependentContinuant) = (history))) & (-((specificallyDependentContinuant) = (spatiotemporalRegion))) & (-((quality) = (relationalQuality))) & (-((quality) = (function))) & (-((quality) = (disposition))) & (-((quality) = (realizableEntity))) & (-((quality) = (role))) & (-((quality) = (occurrent))) & (-((quality) = (process))) & (-((quality) = (processBoundary))) & (-((quality) = (temporalRegion))) & (-((quality) = (zeroDimensionalTemporalRegion))) & (-((quality) = (temporalInstant))) & (-((quality) = (oneDimensionalTemporalRegion))) & (-((quality) = (temporalInterval))) & (-((quality) = (history))) & (-((quality) = (spatiotemporalRegion))) & (-((relationalQuality) = (function))) & (-((relationalQuality) = (disposition))) & (-((relationalQuality) = (realizableEntity))) & (-((relationalQuality) = (role))) & (-((relationalQuality) = (occurrent))) & (-((relationalQuality) = (process))) & (-((relationalQuality) = (processBoundary))) & (-((relationalQuality) = (temporalRegion))) & (-((relationalQuality) = (zeroDimensionalTemporalRegion))) & (-((relationalQuality) = (temporalInstant))) & (-((relationalQuality) = (oneDimensionalTemporalRegion))) & (-((relationalQuality) = (temporalInterval))) & (-((relationalQuality) = (history))) & (-((relationalQuality) = (spatiotemporalRegion))) & (-((function) = (disposition))) & (-((function) = (realizableEntity))) & (-((function) = (role))) & (-((function) = (occurrent))) & (-((function) = (process))) & (-((function) = (processBoundary))) & (-((function) = (temporalRegion))) & (-((function) = (zeroDimensionalTemporalRegion))) & (-((function) = (temporalInstant))) & (-((function) = (oneDimensionalTemporalRegion))) & (-((function) = (temporalInterval))) & (-((function) = (history))) & (-((function) = (spatiotemporalRegion))) & (-((disposition) = (realizableEntity))) & (-((disposition) = (role))) & (-((disposition) = (occurrent))) & (-((disposition) = (process))) & (-((disposition) = (processBoundary))) & (-((disposition) = (temporalRegion))) & (-((disposition) = (zeroDimensionalTemporalRegion))) & (-((disposition) = (temporalInstant))) & (-((disposition) = (oneDimensionalTemporalRegion))) & (-((disposition) = (temporalInterval))) & (-((disposition) = (history))) & (-((disposition) = (spatiotemporalRegion))) & (-((realizableEntity) = (role))) & (-((realizableEntity) = (occurrent))) & (-((realizableEntity) = (process))) & (-((realizableEntity) = (processBoundary))) & (-((realizableEntity) = (temporalRegion))) & (-((realizableEntity) = (zeroDimensionalTemporalRegion))) & (-((realizableEntity) = (temporalInstant))) & (-((realizableEntity) = (oneDimensionalTemporalRegion))) & (-((realizableEntity) = (temporalInterval))) & (-((realizableEntity) = (history))) & (-((realizableEntity) = (spatiotemporalRegion))) & (-((role) = (occurrent))) & (-((role) = (process))) & (-((role) = (processBoundary))) & (-((role) = (temporalRegion))) & (-((role) = (zeroDimensionalTemporalRegion))) & (-((role) = (temporalInstant))) & (-((role) = (oneDimensionalTemporalRegion))) & (-((role) = (temporalInterval))) & (-((role) = (history))) & (-((role) = (spatiotemporalRegion))) & (-((occurrent) = (process))) & (-((occurrent) = (processBoundary))) & (-((occurrent) = (temporalRegion))) & (-((occurrent) = (zeroDimensionalTemporalRegion))) & (-((occurrent) = (temporalInstant))) & (-((occurrent) = (oneDimensionalTemporalRegion))) & (-((occurrent) = (temporalInterval))) & (-((occurrent) = (history))) & (-((occurrent) = (spatiotemporalRegion))) & (-((process) = (processBoundary))) & (-((process) = (temporalRegion))) & (-((process) = (zeroDimensionalTemporalRegion))) & (-((process) = (temporalInstant))) & (-((process) = (oneDimensionalTemporalRegion))) & (-((process) = (temporalInterval))) & (-((process) = (history))) & (-((process) = (spatiotemporalRegion))) & (-((processBoundary) = (temporalRegion))) & (-((processBoundary) = (zeroDimensionalTemporalRegion))) & (-((processBoundary) = (temporalInstant))) & (-((processBoundary) = (oneDimensionalTemporalRegion))) & (-((processBoundary) = (temporalInterval))) & (-((processBoundary) = (history))) & (-((processBoundary) = (spatiotemporalRegion))) & (-((temporalRegion) = (zeroDimensionalTemporalRegion))) & (-((temporalRegion) = (temporalInstant))) & (-((temporalRegion) = (oneDimensionalTemporalRegion))) & (-((temporalRegion) = (temporalInterval))) & (-((temporalRegion) = (history))) & (-((temporalRegion) = (spatiotemporalRegion))) & (-((zeroDimensionalTemporalRegion) = (temporalInstant))) & (-((zeroDimensionalTemporalRegion) = (oneDimensionalTemporalRegion))) & (-((zeroDimensionalTemporalRegion) = (temporalInterval))) & (-((zeroDimensionalTemporalRegion) = (history))) & (-((zeroDimensionalTemporalRegion) = (spatiotemporalRegion))) & (-((temporalInstant) = (oneDimensionalTemporalRegion))) & (-((temporalInstant) = (temporalInterval))) & (-((temporalInstant) = (history))) & (-((temporalInstant) = (spatiotemporalRegion))) & (-((oneDimensionalTemporalRegion) = (temporalInterval))) & (-((oneDimensionalTemporalRegion) = (history))) & (-((oneDimensionalTemporalRegion) = (spatiotemporalRegion))) & (-((temporalInterval) = (history))) & (-((temporalInterval) = (spatiotemporalRegion))) & (-((history) = (spatiotemporalRegion)))) # label("universals-all-different") .

% zero-dimensional-spatial-region, one-dimensional-spatial-region, two-dimensional-spatial-region, three-dimensional-spatial-region are mutually disjoint
((-(exists x exists t  (((instanceOf(x,zeroDimensionalSpatialRegion,t)) & (instanceOf(x,oneDimensionalSpatialRegion,t)))))) & (-(exists x exists t  (((instanceOf(x,zeroDimensionalSpatialRegion,t)) & (instanceOf(x,twoDimensionalSpatialRegion,t)))))) & (-(exists x exists t  (((instanceOf(x,zeroDimensionalSpatialRegion,t)) & (instanceOf(x,threeDimensionalSpatialRegion,t)))))) & (-(exists x exists t  (((instanceOf(x,oneDimensionalSpatialRegion,t)) & (instanceOf(x,twoDimensionalSpatialRegion,t)))))) & (-(exists x exists t  (((instanceOf(x,oneDimensionalSpatialRegion,t)) & (instanceOf(x,threeDimensionalSpatialRegion,t)))))) & (-(exists x exists t  (((instanceOf(x,twoDimensionalSpatialRegion,t)) & (instanceOf(x,threeDimensionalSpatialRegion,t))))))) # label("zero-dimensional-spatial-region+one-dimensional-spatial-region+two-dimensional-spatial-region+three-dimensional-spatial-region-are-mutually-disjoint") .



